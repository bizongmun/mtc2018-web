// Package domains contains the types.
package domains

// Code generated by yo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// LikesSummary represents a row from 'LikesSummaries'.
type LikesSummary struct {
	Second    int64  `spanner:"Second" json:"Second"`       // Second
	SessionID int64  `spanner:"SessionId" json:"SessionId"` // SessionId
	ServerID  string `spanner:"ServerId" json:"ServerId"`   // ServerId
	Likes     int64  `spanner:"Likes" json:"Likes"`         // Likes
}

func LikesSummaryPrimaryKeys() []string {
	return []string{
		"Second",
		"SessionId",
		"ServerId",
	}
}

func LikesSummaryColumns() []string {
	return []string{
		"Second",
		"SessionId",
		"ServerId",
		"Likes",
	}
}

func (ls *LikesSummary) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "Second":
			ret = append(ret, &ls.Second)
		case "SessionId":
			ret = append(ret, &ls.SessionID)
		case "ServerId":
			ret = append(ret, &ls.ServerID)
		case "Likes":
			ret = append(ret, &ls.Likes)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ls *LikesSummary) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "Second":
			ret = append(ret, ls.Second)
		case "SessionId":
			ret = append(ret, ls.SessionID)
		case "ServerId":
			ret = append(ret, ls.ServerID)
		case "Likes":
			ret = append(ret, ls.Likes)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newLikesSummary_Decoder returns a decoder which reads a row from *spanner.Row
// into LikesSummary. The decoder is not goroutine-safe. Don't use it concurrently.
func newLikesSummary_Decoder(cols []string) func(*spanner.Row) (*LikesSummary, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*LikesSummary, error) {
		var ls LikesSummary
		ptrs, err := ls.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &ls, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (ls *LikesSummary) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("LikesSummaries", LikesSummaryColumns(), []interface{}{
		ls.Second, ls.SessionID, ls.ServerID, ls.Likes,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (ls *LikesSummary) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("LikesSummaries", LikesSummaryColumns(), []interface{}{
		ls.Second, ls.SessionID, ls.ServerID, ls.Likes,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (ls *LikesSummary) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("LikesSummaries", LikesSummaryColumns(), []interface{}{
		ls.Second, ls.SessionID, ls.ServerID, ls.Likes,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (ls *LikesSummary) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, LikesSummaryPrimaryKeys()...)

	values, err := ls.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "LikesSummary.UpdateColumns", "LikesSummaries", err)
	}

	return spanner.Update("LikesSummaries", colsWithPKeys, values), nil
}

// FindLikesSummary gets a LikesSummary by primary key
func FindLikesSummary(ctx context.Context, db YORODB, second int64, sessionID int64, serverID string) (*LikesSummary, error) {
	key := spanner.Key{second, sessionID, serverID}
	row, err := db.ReadRow(ctx, "LikesSummaries", key, LikesSummaryColumns())
	if err != nil {
		return nil, newError("FindLikesSummary", "LikesSummaries", err)
	}

	decoder := newLikesSummary_Decoder(LikesSummaryColumns())
	ls, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindLikesSummary", "LikesSummaries", err)
	}

	return ls, nil
}

// Delete deletes the LikesSummary from the database.
func (ls *LikesSummary) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := ls.columnsToValues(LikesSummaryPrimaryKeys())
	return spanner.Delete("LikesSummaries", spanner.Key(values))
}
